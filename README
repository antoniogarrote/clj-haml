clj-haml is small HTML template library for Clojure inspired in the Ruby template library Haml (http://haml.hamptoncatlin.com/).


A Ruby Haml example could be:

%div#things
    %span#rice Chicken Fried
    %p.beans{ :food => 'true' } The magical fruit
    %h1.class.otherclass#id La La La


The equivalent clj-haml code would be:

(h= :div#things
             (h= :span#rice "Chicken Fried")
             (h= :p.beans {:food "true"} "The magical fruit")
             (h= :h1.class.otherclass#id "La La La"))



There are most relevant function is h=:

(h= :[selector] [attributes] [content] [/])

where:

- selector: an optional keyword with a HTML tag, identifier and classes specified with CSS syntax.
            If no selector is given or if no tag name is at the begining of the symbol, 'div' is assumed.
            Some examples: :p#myid.myclass1.myclass2, :p.myclass1, :p#myid, :#myid, :.myclass1
- attributes: a optional map with keys and values for attributes names and values, e.g: {:href "/test.html"}
- content: a form or forms that will be evaluated and whose resulting value will be inserted in the tag.
- /: a backslash that, if present, will generate a self-closed tag, e.g: (h= :br /) will be parsed to <br/>


Other functions are

- (h-file path), that will load the file at the path parameter.
- (!!! [:options] [forms]) will insert a document prolog, and then process the rest of optionals forms. Some options are available:
    - (!!!) -> "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//ENhttp://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"
    - (!!! :xml) -> "<?xml version='1.0' encoding='utf-8' ?>"
    - (!!! 1.1) -> "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1 Transitional//ENhttp://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"
    - (!!! Strict) -> "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//ENhttp://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"
    - (!!! :xml "iso-8859-15") -> "<?xml version='1.0' encoding='iso-8859-1' ?>"
-(with-haml-template path :format [bindings-list]), Looks for a templat file ending with path.format.haml, and parses the template using the optional bindings list for the
    vars in the template. For instance: (with-haml-template "/my/path/to/template" :html [vara 12 varb "foo"]) will parse the file /my/path/to/template.html.haml with bindings
    vara = 12 and varb = "foo".


Some tests are included in the source file.